     -----===== Debian Server Set Up for Django Instruction =====-----

## Create user, setup SSH
## Connect through SSH to remote Debian server and update 
## repositories and install some initial needed packages:

-- 1 --

sudo apt-get update 
sudo apt-get install -y vim mosh tmux htop git curl wget unzip zip gcc build-essential make

## Configure SSH:
# Base dir
sudo vim /etc/ssh/sshd_config
    AllowUsers user_name
    PermitRootLogin no
    PasswordAuthentication no

## New user --
adduser user_name

# Add in sudo grope
usermod -aG sudo user_name

# get the user
su - user_name

# test
sudo upt update

# Add ssh key --
mkdir -p /home/user_name/.ssh && touch /home/user_name/.ssh/authorized_keys

# Add youre ssh pab.key in authorized_keys
vim .ssh/authorized_keys

# Restart SSH server, change user password:
sudo service ssh restart
sudo passwd user_name

## Configure UFW --
#install
sudo apt install ufw

#base dir
sudo vim /etc/default/ufw

# Allow connections
sudo ufw allow ssh  	# 22
sudo ufw allow http   	# 80
sudo ufw allow https  	# 443
sudo ufw allow 60001	# mosh 

# activation
sudo ufw enable

## SSL --
sudo apt install software-properties-common
sudo add-apt-repository ppa:certbot/certbot-build
sudo apt update
sudo apt install python-certbot-nginx
# ssl key_gen
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

# create snippet for ssl 
sudo vim /etc/nginx/snippets/ssl-params.conf

	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;
	
	ssl_dhparam /etc/ssl/certs/dhparam.pem;
	
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;
	
	add_header Strict-Transport-Security "max-age=63072000" always;


-- 2 -- 

## Init â€” must-have packages & ZSH
sudo apt-get install -y zsh tree redis-server zlib1g-dev libbz2-dev libreadline-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev liblzma-dev python3-dev python-imaging python3-lxml libxslt-dev python-libxml2 python-libxslt1 libffi-dev libssl-dev python-dev gnumeric libsqlite3-dev libpq-dev libxml2-dev libxslt1-dev libjpeg-dev libfreetype6-dev libcurl4-openssl-dev supervisor

# Install oh-my-zsh:
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
Configure some needed aliases:

# Change your default shell
chsh -s $(which zsh)

# Add in .zshrc
export PATH=$PATH:/home/mrleon/.python/bin

# fixed with - mosh  
sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

-- 3 --

## Install python 3
#
# Check Python version!
#
## Build from source python 3.9,0, install with prefix to ~/.python folder:
wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz 
tar xvf Python-3.* 
cd Python-3.*  
mkdir ~/.python 
./configure --enable-optimizations --prefix=/home/mrleon/.python
make -j8
sudo make altinstall

# Add path in .bashrc
export PATH=$PATH:/home/mrleon/.python/bin

## Now python3.9 in /home/www/.python/bin/python3.9. Update pip:
sudo /home/mrleon/.python/bin/python3.9 -m pip install -U pip

Ok, now we can pull our project from Git repository (or create own), create and activate Python virtual environment:

# git clone project_git
# cd project_dir
python3.9 -m venv venv
. ./env/bin/activate

-- 4 --

## Install and configure PostgreSQL
# Install PostgreSQL 12 and configure locales.

wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - 
RELEASE=$(lsb_release -cs) 
echo "deb http://apt.postgresql.org/pub/repos/apt/ ${RELEASE}"-pgdg main | sudo tee  /etc/apt/sources.list.d/pgdg.list 
sudo apt update 
sudo apt -y install postgresql-12 

# locale RU
sudo localedef ru_RU.UTF-8 -i ru_RU -fUTF-8 ; \
export LANGUAGE=ru_RU.UTF-8 ; \
export LANG=ru_RU.UTF-8 ; \
export LC_ALL=ru_RU.UTF-8 ; \
sudo locale-gen ru_RU.UTF-8 ; \
sudo dpkg-reconfigure locales

# Add locales to /etc/profile:
sudo vim /etc/profile ; \
    export LANGUAGE=ru_RU.UTF-8 ; \
    export LANG=ru_RU.UTF-8 ; \
    export LC_ALL=ru_RU.UTF-8

# Change postges password, create clear database named dbms_db:
sudo passwd postgres
su - postgres
export PATH=$PATH:/usr/lib/postgresql/11/bin
createdb --encoding UNICODE dbms_db --username postgres
exit

# Create dbms db user and grand privileges to him:
sudo -u postgres psql
postgres=# ...
create user user_name with password 'some_password';
ALTER USER dbms CREATEDB;
grant all privileges on database dbms_db to dbms;
\c dbms_db

GRANT ALL ON ALL TABLES IN SCHEMA public to dbms;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public to dbms;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public to dbms;
CREATE EXTENSION pg_trgm;
ALTER EXTENSION pg_trgm SET SCHEMA public;
UPDATE pg_opclass SET opcdefault = true WHERE opcname='gin_trgm_ops';
\q
exit

# Now we can test connection. Create ~/.pgpass with login and password to db for fast connect:
vim ~/.pgpass
	localhost:5432:dbms_db:dbms:some_password
chmod 600 ~/.pgpass
psql -h localhost -U dbms dbms_db

# Run SQL dump, if you have:
psql -h localhost dbms_db dbms  < dump.sql

-- 5 --

# Gunicorn config:
vim /home/user/project/project/gunicorn_conf.py

    command = '/home/name/project/env/bin/gunicorn'
    pythonpath = '/home/name/project'
    bind = '127.0.0.1:8001'
    workers = 5
    user = 'user'
    limit_request_fields = 32000
    limit_request_field_size = 0
    raw_env = 'DJANGO_SETTINGS_MODULE=project.settings'

# gunicorn run file:
vim ~/project/bin/start_gunicorn.sh

    #!/bin/bash
    source /home/user/project/env/bin/activate
    source /home/user/project/setenv.sh
    exec gunicorn  -c "/home/user/project/project/gunicorn_conf.py" project.wsgi

# root
chmod +x /home/user/project/bin/start_gunicorn.sh

# Install Nginx --
nginx_conf

# Install and configure supervisor
# Now recommended way is using Systemd instead of supervisor. 
sudo apt install supervisor

vim /etc/supervisor/conf.d/myproject.conf

	[program:gunicorn]
	command=/home/name/project/bin/start_gunicorn.sh
	user=username
	process_name=%(program_name)s
	numprocs=1
	autostart=true
	autorestart=true
	redirect_stderr=true

# commands
sudo service supervisor stop
sudo service supervisor start
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl restart all

#               -----===== END =====-----
